#!/bin/bash
# Designed to be run from the crontab, for example:
# To log every 5 mins your laptop's temperature to your $SG_HOST
# */5 * * * * ID=temp sg-client -d $SG_HOST -g temp /sys/class/thermal/thermal_zone0/temp

sr=/var/sg # sg's root

# to identify where the data is coming from
id=$(hostname)

# Every graph needs a name
g="unnamed"

sent=false

while getopts "r:g:d:i:" o
do
	case "$o" in
	(r) sr="$OPTARG";; # root
	(g) g="$OPTARG";; # graph name
	(d) d="$OPTARG";; # destination
	(i) id="$OPTARG";;# override hostname as client id
	esac
done
shift $((OPTIND - 1))

# Crucial hierachy e.g. /var/sg/machine-id/temperature/022.csv, 022 is the day of the year
f="$sr/$id/$g/$(date +%j).csv"

# MUST be rooted by EPOCH time
if test -f "$1"
then
	m="$(date +%s) $(< $1)"
else
	m="$(date +%s) $(< /dev/stdin)"
fi

if test "$d" # we are ssh-ing if we have a destination
then

	# Try use an authenticated socket, it's fast
	# See: https://github.com/kaihendry/Kai-s--HOME/blob/master/.xinitrc#L9
	SSH_ENV=$HOME/.ssh/environment
	test -f ${SSH_ENV} && . ${SSH_ENV} > /dev/null

	test -f "$f" && m="$(< $f)\n$m"

	if echo $m | ssh $d "cat - >> $f" &>/dev/null
	then
		sent=true
	else
		ssh $d "mkdir -p $(dirname $f)"
		echo $m | ssh $d "cat - >> $f" &&
		sent=true
	fi

fi

if "$sent"
then
	rm -f "$f"
	echo "$m >> $d:$f"
	exit 0
fi

# This should not fail once setup

mkdir -p $(dirname $f)
echo $m >> $f
test "$?" -eq 0 &&
echo "$m >> $f"
# sort uniq
